{"version":3,"sources":["../src/common-misspellings.js"],"names":[],"mappings":"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","file":"common-misspellings.js","sourcesContent":["/* textlint-rule-common-misspellings\n * Copyright (C) 2016  IRIDE Monad <iride.monad@gmail.com>\n *\n * This file is part of `textlint-rule-common-misspellings`.\n *\n * `misspellings` is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * `misspellings` is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with `misspellings`.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n\"use strict\";\n\nimport {RuleHelper} from \"textlint-rule-helper\";\nimport misspellings from \"misspellings\";\n\nconst DEFAULT_OPTIONS = {\n  // Misspellings to be ignored\n  \"ignore\": []\n};\n\nfunction reporter(context, options = {}) {\n  const opts = Object.assign({}, DEFAULT_OPTIONS, options);\n\n  const ignoreDict = {};\n  (opts[\"ignore\"] || []).forEach((s) => {\n    ignoreDict[s.toLowerCase()] = true;\n  });\n\n  let helper = new RuleHelper(context);\n  let {Syntax, RuleError, fixer, report, getSource} = context;\n  return {\n    [Syntax.Str](node) {\n      if (helper.isChildNode(node, [Syntax.BlockQuote])) {\n        return;\n      }\n\n      return new Promise((resolve, reject) => {\n        const text = getSource(node);\n        const dict = misspellings.dict({ lowerCase: true });\n        const re = misspellings.regexp(\"ig\");\n\n        let matches;\n        while (matches = re.exec(text)) {\n          const index = matches.index;\n          const misspell = matches[0];\n          const dickey = misspell.toLowerCase();\n          const range = [index, index + misspell.length];\n\n          // Skip ignored word\n          if (ignoreDict[dickey]) continue;\n\n          const csv = dict[dickey];\n          if (!csv) continue;\n\n          const corrects = csv.split(\",\");\n          let fix;\n          if (corrects.length === 1) {\n            // If there is only one correct word, we can fix this confidently.\n            fix = fixer.replaceTextRange(range, mapCases(misspell, corrects[0]));\n          }\n\n          const message = `This is a commonly misspelled word. Correct it to ${corrects.join(\", \")}`;\n          report(node, new RuleError(message, { index, fix }));\n        }\n\n        resolve();\n      });\n    }\n  };\n}\n\nfunction mapCases(source, dest) {\n  const mapped = new Array(dest.length);\n  for (let i = 0, l = dest.length; i < l; i++) {\n    const sc = source.charCodeAt(i);  // becomes NaN when i exceeds source.length\n    const dc = dest.charCodeAt(i);\n\n    // If source is upper-case and dest is lower-case\n    if (sc >= 0x41 && sc <= 0x5A && dc >= 0x61 && dc <= 0x7A) {\n      // Make dest character upper-case\n      mapped[i] = dc - 0x20;\n    } else {\n      mapped[i] = dc;\n    }\n  }\n  return String.fromCharCode.apply(String, mapped);\n}\n\nexport default {\n  linter: reporter,\n  fixer: reporter,\n}\n"]}