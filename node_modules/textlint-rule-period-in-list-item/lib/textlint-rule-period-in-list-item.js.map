{"version":3,"sources":["../src/textlint-rule-period-in-list-item.js"],"names":["checkEndsWithPeriod","require","checkEndsWithoutPeriodMark","text","periodMarks","periodMark","index","isPeriodMarkAtEnd","indexOf","valid","isItemNodeInOrderedList","node","parent","ordered","defaultOptions","reporter","context","options","Syntax","RuleError","report","fixer","getSource","preferPeriodMark","isNotNeededPeriodMark","concat","allowPeriodMarks","undefined","ignoreLinkEnd","allowEmoji","allowOrderedList","forceAppendPeriod","ListItem","paragraphNodes","children","filter","type","Paragraph","firstParagraphNode","fix","replaceTextRange","length","linkNodes","Link","module","exports","linter"],"mappings":"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","sourcesContent":["// MIT © 2017 azu\n\"use strict\";\nconst checkEndsWithPeriod = require(\"check-ends-with-period\");\n/**\n * check `text` that the end is not periodMark\n * @param {string} text\n * @param {string[]} periodMarks\n * @returns {{valid: boolean, periodMark: string, index: number}}\n */\nconst checkEndsWithoutPeriodMark = (text, periodMarks) => {\n    const {periodMark, index} = checkEndsWithPeriod(text, {\n        periodMarks\n    });\n    // actually periodMark is at end.\n    const isPeriodMarkAtEnd = periodMarks.indexOf(periodMark) !== -1;\n    if (isPeriodMarkAtEnd) {\n        return {\n            valid: false,\n            periodMark,\n            index\n        };\n    }\n    return {\n        valid: true,\n        periodMark,\n        index\n    };\n};\n/**\n * Return true if parent node is Ordered List\n * @param node\n * @returns {boolean}\n */\nconst isItemNodeInOrderedList = (node) => {\n    return node && node.parent && node.parent.ordered === true;\n};\nconst defaultOptions = {\n    // prefer to use period mark.\n    // \"\" (default is no period)\n    // You can select period mark like \".\" from \"periodMarks\".\n    \"periodMark\": \"\",\n    // Built-in recognized period mark list\n    // if the period of the text is not `periodMark` and it is a string in the `periodMarks`,\n    \"periodMarks\": [\".\", \"。\", \"．\"],\n    // Ignore only link tag\n    // - [text](link)\n    // It is not needed period mark\n    \"ignoreLinkEnd\": true,\n    // define exception period mark list at end of the list item\n    // Ignore this period mark\n    \"allowPeriodMarks\": [],\n    // Allow emoji at end of the list item\n    \"allowEmoji\": false,\n    // Allow ordered list item\n    // 1. ~.\n    // 2. ~.\n    \"allowOrderedList\": false,\n    // If not exist `periodMark` at end of the list item\n    // Automatically, append `periodMark` when does textlint --fix\n    \"forceAppendPeriod\": false\n};\nconst reporter = (context, options = {}) => {\n    const {Syntax, RuleError, report, fixer, getSource} = context;\n    const preferPeriodMark = options.periodMark || defaultOptions.periodMark;\n    const isNotNeededPeriodMark = preferPeriodMark === \"\";\n    // always `preferPeriodMark` is added to periodMarks\n    const periodMarks = (options.periodMarks || defaultOptions.periodMarks).concat(preferPeriodMark);\n    const allowPeriodMarks = options.allowPeriodMarks !== undefined\n        ? options.allowPeriodMarks\n        : defaultOptions.allowPeriodMarks;\n    const ignoreLinkEnd = options.ignoreLinkEnd !== undefined\n        ? options.ignoreLinkEnd\n        : defaultOptions.ignoreLinkEnd;\n    const allowEmoji = options.allowEmoji !== undefined\n        ? options.allowEmoji\n        : defaultOptions.allowEmoji;\n    const allowOrderedList = options.allowOrderedList !== undefined\n        ? options.allowOrderedList\n        : defaultOptions.allowOrderedList;\n    const forceAppendPeriod = options.forceAppendPeriod !== undefined\n        ? options.forceAppendPeriod\n        : defaultOptions.forceAppendPeriod;\n    return {\n        [Syntax.ListItem](node) {\n            // Skip Ordered List item if option is enabled\n            if (allowOrderedList && isItemNodeInOrderedList(node)) {\n                return;\n            }\n            // A ListItem should includes child nodes.\n            // https://github.com/textlint-rule/textlint-rule-period-in-list-item/issues/3\n            const paragraphNodes = node.children.filter(node => node.type === Syntax.Paragraph);\n            const firstParagraphNode = paragraphNodes[0];\n            if (!firstParagraphNode) {\n                return;\n            }\n            const text = getSource(firstParagraphNode);\n            // Prefer no needed period, but exist period\n            if (isNotNeededPeriodMark) {\n                const {valid, periodMark, index} = checkEndsWithoutPeriodMark(text, periodMarks);\n                if (valid) {\n                    return;\n                }\n                // should be remove period mark\n                report(firstParagraphNode, new RuleError(`Should remove period mark(\"${periodMark}\") at end of list item.`, {\n                    index,\n                    fix: fixer.replaceTextRange([index, index + periodMark.length], \"\")\n                }));\n                return;\n            }\n            // - [link](http://example)\n            // should be ignored\n            if (ignoreLinkEnd) {\n                const linkNodes = firstParagraphNode.children;\n                if (linkNodes.length === 1 && linkNodes[0].type === Syntax.Link) {\n                    return;\n                }\n            }\n            const {valid, periodMark, index} = checkEndsWithPeriod(text, {\n                periodMarks,\n                allowPeriodMarks,\n                allowEmoji,\n            });\n            // Prefer to use period\n            if (valid) {\n                //  but exist difference period\n                const isPeriodMarkAtEnd = periodMarks.indexOf(periodMark) !== -1;\n                // exception case that should not report\n                // !?\n                if (!isPeriodMarkAtEnd) {\n                    return;\n                }\n                // periodMark is expected, then exit\n                if (periodMark === preferPeriodMark) {\n                    return;\n                }\n                report(firstParagraphNode, new RuleError(`Prefer to use period mark(\"${preferPeriodMark}\") at end of list item.`, {\n                    index,\n                    fix: fixer.replaceTextRange([index, index + periodMark.length], preferPeriodMark)\n                }));\n            } else {\n                // but not exist period\n                if (forceAppendPeriod) {\n                    report(firstParagraphNode, new RuleError(`Not exist period mark(\"${preferPeriodMark}\") at end of list item.`, {\n                        index,\n                        fix: fixer.replaceTextRange([index + 1, index + 1], preferPeriodMark)\n                    }));\n                } else {\n                    report(firstParagraphNode, new RuleError(`Not exist period mark(\"${preferPeriodMark}\") at end of list item.`, {\n                        index\n                    }))\n                }\n            }\n        }\n    }\n};\nmodule.exports = {\n    linter: reporter,\n    fixer: reporter\n};\n"],"file":"textlint-rule-period-in-list-item.js"}