"use strict";

var path = require("path");

var {
  rcFile
} = require("rc-config-loader");

var {
  getConfigBaseDir
} = require("@textlint/get-config-base-dir");

var {
  matchPatterns
} = require("@textlint/regexp-string-matcher");

var getAllowWordsFromFiles = (files, baseDirectory) => {
  var results = [];
  files.forEach(filePath => {
    // TODO: use other loader
    var contents = rcFile("file", {
      configFileName: path.resolve(baseDirectory, filePath)
    });

    if (contents && Array.isArray(contents.config)) {
      results = results.concat(contents.config);
    } else {
      throw new Error("This allow file is not allow word list: ".concat(filePath));
    }
  });
  return results;
};

var defaultOptions = {
  /**
   * allowing list strings or RegExp-like strings
   *
   * [
   *     "string",
   *     "/\\d+/",
   *     "/^===/m",
   * ]
   */
  allow: [],

  /**
   * file path list that includes allow words.
   */
  allowlistConfigPaths: []
};

module.exports = function (context, options) {
  var {
    Syntax,
    shouldIgnore,
    getSource
  } = context;
  var baseDirectory = getConfigBaseDir(context) || process.cwd();
  var allowWords = options.allow || defaultOptions.allow;
  var allowlistConfigPaths = options.allowlistConfigPaths ? getAllowWordsFromFiles(options.allowlistConfigPaths, baseDirectory) : [];
  var allAllowWords = allowWords.concat(allowlistConfigPaths);
  return {
    [Syntax.Document](node) {
      var text = getSource(node);
      var matchResults = matchPatterns(text, allAllowWords);
      matchResults.forEach(result => {
        shouldIgnore([result.startIndex, result.endIndex]);
      });
    }

  };
};
//# sourceMappingURL=textlint-filter-rule-allowlist.js.map