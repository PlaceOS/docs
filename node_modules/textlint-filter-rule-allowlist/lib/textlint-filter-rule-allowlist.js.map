{"version":3,"sources":["../src/textlint-filter-rule-allowlist.js"],"names":["path","require","rcFile","getConfigBaseDir","matchPatterns","getAllowWordsFromFiles","files","baseDirectory","results","forEach","filePath","contents","configFileName","resolve","Array","isArray","config","concat","Error","defaultOptions","allow","allowlistConfigPaths","module","exports","context","options","Syntax","shouldIgnore","getSource","process","cwd","allowWords","allAllowWords","Document","node","text","matchResults","result","startIndex","endIndex"],"mappings":";;AAAA,IAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,IAAM;AAAEC,EAAAA;AAAF,IAAaD,OAAO,CAAC,kBAAD,CAA1B;;AACA,IAAM;AAAEE,EAAAA;AAAF,IAAuBF,OAAO,CAAC,+BAAD,CAApC;;AACA,IAAM;AAAEG,EAAAA;AAAF,IAAoBH,OAAO,CAAC,iCAAD,CAAjC;;AACA,IAAMI,sBAAsB,GAAG,CAACC,KAAD,EAAQC,aAAR,KAA0B;AACrD,MAAIC,OAAO,GAAG,EAAd;AACAF,EAAAA,KAAK,CAACG,OAAN,CAAeC,QAAD,IAAc;AACxB;AACA,QAAMC,QAAQ,GAAGT,MAAM,CAAC,MAAD,EAAS;AAC5BU,MAAAA,cAAc,EAAEZ,IAAI,CAACa,OAAL,CAAaN,aAAb,EAA4BG,QAA5B;AADY,KAAT,CAAvB;;AAGA,QAAIC,QAAQ,IAAIG,KAAK,CAACC,OAAN,CAAcJ,QAAQ,CAACK,MAAvB,CAAhB,EAAgD;AAC5CR,MAAAA,OAAO,GAAGA,OAAO,CAACS,MAAR,CAAeN,QAAQ,CAACK,MAAxB,CAAV;AACH,KAFD,MAEO;AACH,YAAM,IAAIE,KAAJ,mDAAqDR,QAArD,EAAN;AACH;AACJ,GAVD;AAWA,SAAOF,OAAP;AACH,CAdD;;AAgBA,IAAMW,cAAc,GAAG;AACnB;;;;;;;;;AASAC,EAAAA,KAAK,EAAE,EAVY;;AAWnB;;;AAGAC,EAAAA,oBAAoB,EAAE;AAdH,CAAvB;;AAgBAC,MAAM,CAACC,OAAP,GAAiB,UAASC,OAAT,EAAkBC,OAAlB,EAA2B;AACxC,MAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,YAAV;AAAwBC,IAAAA;AAAxB,MAAsCJ,OAA5C;AACA,MAAMjB,aAAa,GAAGJ,gBAAgB,CAACqB,OAAD,CAAhB,IAA6BK,OAAO,CAACC,GAAR,EAAnD;AACA,MAAMC,UAAU,GAAGN,OAAO,CAACL,KAAR,IAAiBD,cAAc,CAACC,KAAnD;AACA,MAAMC,oBAAoB,GAAGI,OAAO,CAACJ,oBAAR,GACvBhB,sBAAsB,CAACoB,OAAO,CAACJ,oBAAT,EAA+Bd,aAA/B,CADC,GAEvB,EAFN;AAGA,MAAMyB,aAAa,GAAGD,UAAU,CAACd,MAAX,CAAkBI,oBAAlB,CAAtB;AACA,SAAO;AACH,KAACK,MAAM,CAACO,QAAR,EAAkBC,IAAlB,EAAwB;AACpB,UAAMC,IAAI,GAAGP,SAAS,CAACM,IAAD,CAAtB;AACA,UAAME,YAAY,GAAGhC,aAAa,CAAC+B,IAAD,EAAOH,aAAP,CAAlC;AACAI,MAAAA,YAAY,CAAC3B,OAAb,CAAsB4B,MAAD,IAAY;AAC7BV,QAAAA,YAAY,CAAC,CAACU,MAAM,CAACC,UAAR,EAAoBD,MAAM,CAACE,QAA3B,CAAD,CAAZ;AACH,OAFD;AAGH;;AAPE,GAAP;AASH,CAjBD","sourcesContent":["const path = require(\"path\");\nconst { rcFile } = require(\"rc-config-loader\");\nconst { getConfigBaseDir } = require(\"@textlint/get-config-base-dir\");\nconst { matchPatterns } = require(\"@textlint/regexp-string-matcher\");\nconst getAllowWordsFromFiles = (files, baseDirectory) => {\n    let results = [];\n    files.forEach((filePath) => {\n        // TODO: use other loader\n        const contents = rcFile(\"file\", {\n            configFileName: path.resolve(baseDirectory, filePath)\n        });\n        if (contents && Array.isArray(contents.config)) {\n            results = results.concat(contents.config);\n        } else {\n            throw new Error(`This allow file is not allow word list: ${filePath}`);\n        }\n    });\n    return results;\n};\n\nconst defaultOptions = {\n    /**\n     * allowing list strings or RegExp-like strings\n     *\n     * [\n     *     \"string\",\n     *     \"/\\\\d+/\",\n     *     \"/^===/m\",\n     * ]\n     */\n    allow: [],\n    /**\n     * file path list that includes allow words.\n     */\n    allowlistConfigPaths: []\n};\nmodule.exports = function(context, options) {\n    const { Syntax, shouldIgnore, getSource } = context;\n    const baseDirectory = getConfigBaseDir(context) || process.cwd();\n    const allowWords = options.allow || defaultOptions.allow;\n    const allowlistConfigPaths = options.allowlistConfigPaths\n        ? getAllowWordsFromFiles(options.allowlistConfigPaths, baseDirectory)\n        : [];\n    const allAllowWords = allowWords.concat(allowlistConfigPaths);\n    return {\n        [Syntax.Document](node) {\n            const text = getSource(node);\n            const matchResults = matchPatterns(text, allAllowWords);\n            matchResults.forEach((result) => {\n                shouldIgnore([result.startIndex, result.endIndex]);\n            });\n        }\n    };\n};\n"],"file":"textlint-filter-rule-allowlist.js"}