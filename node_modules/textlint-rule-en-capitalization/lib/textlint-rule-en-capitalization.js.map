{"version":3,"sources":["../src/textlint-rule-en-capitalization.js"],"names":["require","RuleHelper","splitAST","SentenceSyntax","Syntax","REPORT_TYPE","Heading","Paragraph","List","shouldNotCapitalized","string","allowWords","shouldAllowed","some","allowWord","test","pos","checkNode","node","getSource","report","RuleError","fixer","allowFigures","reportType","DocumentURL","paragraphNode","children","filter","sentence","type","Sentence","forEach","sentenceFirstNode","Str","text","value","firstWord","split","index","fix","replaceTextRange","length","Image","alt","DefaultOptions","allowHeading","allowLists","context","options","undefined","Array","isArray","helper","Header","isChildNode","Link","BlockQuote","Emphasis","ListItem","blockNode","module","exports","linter"],"mappings":"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","sourcesContent":["// MIT Â© 2017 azu\n\"use strict\";\nconst { RuleHelper } = require(\"textlint-rule-helper\");\nconst { splitAST, Syntax: SentenceSyntax } = require(\"sentence-splitter\");\nimport { getPosFromSingleWord, isCapitalized, upperFirstCharacter } from \"./captalize\";\n\nconst REPORT_TYPE = {\n    Heading: \"Heading\",\n    Paragraph: \"Paragraph\",\n    List: \"List\"\n};\nconst shouldNotCapitalized = (string, allowWords) => {\n    // allow words\n    const shouldAllowed = allowWords.some(allowWord => {\n        return allowWord === string;\n    });\n    if (shouldAllowed) {\n        return true;\n    }\n    // Can not capitalize word\n    if (!/^[a-zA-Z]/.test(string)) {\n        return true;\n    }\n    // A quotation\n    if (!/^\\w/.test(string)) {\n        return true;\n    }\n    // proper word\n    const pos = getPosFromSingleWord(string);\n    if (/^NNP/.test(pos)) {\n        return true;\n    }\n    return false;\n};\n\n/**\n * @param node\n * @param Syntax\n * @param {function} getSource\n * @param report\n * @param RuleError\n * @param fixer\n * @param {boolean} allowFigures enable figures check\n * @param {string[]} allowWords allow lower-case words\n * @param {string} reportType REPORT_TYPE\n */\nconst checkNode = ({ node, Syntax, getSource, report, RuleError, fixer, allowFigures, allowWords, reportType }) => {\n    const DocumentURL = \"https://owl.english.purdue.edu/owl/resource/592/01/\";\n    const paragraphNode = splitAST(node);\n    paragraphNode.children\n        .filter(sentence => sentence.type === SentenceSyntax.Sentence)\n        .forEach(sentence => {\n            const sentenceFirstNode = sentence.children[0];\n            if (!sentenceFirstNode) {\n                return;\n            }\n            // check first word is String\n            if (sentenceFirstNode.type === Syntax.Str) {\n                const text = sentenceFirstNode.value;\n                const firstWord = text.split(/\\s/)[0];\n                if (isCapitalized(firstWord) || shouldNotCapitalized(firstWord, allowWords)) {\n                    return;\n                }\n                const index = 0;\n                return report(\n                    sentenceFirstNode,\n                    new RuleError(\n                        `${reportType}: Follow the standard capitalization rules for American English.\nSee ${DocumentURL}`,\n                        {\n                            index: index,\n                            fix: fixer.replaceTextRange(\n                                [index, index + firstWord.length],\n                                upperFirstCharacter(firstWord)\n                            )\n                        }\n                    )\n                );\n            } else if (\n                allowFigures &&\n                sentenceFirstNode.type === Syntax.Image &&\n                typeof sentenceFirstNode.alt === \"string\"\n            ) {\n                const text = sentenceFirstNode.alt;\n                if (isCapitalized(text) || shouldNotCapitalized(text, allowWords)) {\n                    return;\n                }\n                return report(\n                    sentenceFirstNode,\n                    new RuleError(\n                        `Image alt: Follow the standard capitalization rules for American English\nSee ${DocumentURL}`\n                    )\n                );\n            }\n        });\n};\n\nconst DefaultOptions = {\n    // allow lower-case words in Header\n    allowHeading: true,\n    // allow lower-case words in Image alt\n    allowFigures: true,\n    // allow lower-case words in ListItem\n    allowLists: true,\n    // allow lower-case words in anywhere\n    allowWords: []\n};\nconst report = (context, options = {}) => {\n    const { Syntax, RuleError, getSource, fixer, report } = context;\n    const allowHeading = options.allowHeading !== undefined ? options.allowHeading : DefaultOptions.allowHeading;\n    const allowLists = options.allowLists !== undefined ? options.allowLists : DefaultOptions.allowLists;\n    const allowFigures = options.allowFigures !== undefined ? options.allowFigures : DefaultOptions.allowFigures;\n    const allowWords = Array.isArray(options.allowWords) ? options.allowWords : DefaultOptions.allowWords;\n    const helper = new RuleHelper(context);\n    return {\n        [Syntax.Header](node) {\n            // options\n            if (!allowHeading) {\n                return;\n            }\n            checkNode({\n                node,\n                Syntax,\n                getSource,\n                report,\n                RuleError,\n                fixer,\n                allowFigures,\n                allowWords,\n                reportType: REPORT_TYPE.Heading\n            });\n        },\n        [Syntax.Paragraph](node) {\n            if (helper.isChildNode(node, [Syntax.Link, Syntax.Image, Syntax.BlockQuote, Syntax.Emphasis])) {\n                return;\n            }\n            if (helper.isChildNode(node, [Syntax.ListItem])) {\n                return;\n            }\n            checkNode({\n                node,\n                Syntax,\n                getSource,\n                report,\n                RuleError,\n                fixer,\n                allowFigures,\n                allowWords,\n                reportType: REPORT_TYPE.Paragraph\n            });\n        },\n        [Syntax.ListItem](node) {\n            if (!allowLists) {\n                return;\n            }\n            node.children.forEach(blockNode => {\n                // Ignore other block node\n                // CodeBlock is a part of block node\n                // https://github.com/textlint-rule/textlint-rule-en-capitalization/issues/4\n                if (blockNode.type !== Syntax.Paragraph) {\n                    return;\n                }\n                checkNode({\n                    node: blockNode,\n                    Syntax,\n                    getSource,\n                    report,\n                    RuleError,\n                    fixer,\n                    allowFigures,\n                    allowWords,\n                    reportType: REPORT_TYPE.List\n                });\n            });\n        }\n    };\n};\nmodule.exports = {\n    linter: report,\n    fixer: report\n};\n"],"file":"textlint-rule-en-capitalization.js"}