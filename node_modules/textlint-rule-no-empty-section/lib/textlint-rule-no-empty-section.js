// LICENSE : MIT
"use strict";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var createSections = require("select-section");
module.exports = function (context) {
    var Syntax = context.Syntax;
    var RuleError = context.RuleError;
    var report = context.report;
    var getSource = context.getSource;
    /**
     * if `section` contain only Header nodes, return true
     * @param {Object} section
     * @returns {boolean}
     */

    var isHeaderOnly = function isHeaderOnly(section) {
        var notHeaderNodes = section.children.filter(function (child) {
            return child.type !== Syntax.Header;
        });
        return notHeaderNodes.length === 0;
    };
    /**
     * find first Header Node in the `section`
     * @param {Object} section
     * @returns {TxtNode}
     */
    var findFirstHeader = function findFirstHeader(section) {
        var headerNodes = section.children.filter(function (child) {
            return child.type === Syntax.Header;
        });
        return headerNodes[0];
    };
    /**
     * if `section` is empty, return true
     * @param {Object} section
     * @returns {boolean}
     */
    var isEmptySection = function isEmptySection(section) {
        if (!Array.isArray(section.children)) {
            return false;
        }
        return isHeaderOnly(section);
    };
    return _defineProperty({}, Syntax.Document, function (node) {
        var sections = createSections(node);
        sections.filter(isEmptySection).forEach(function (section) {
            var header = findFirstHeader(section);
            if (!header) {
                return;
            }
            report(node, new RuleError("Found empty section: `" + getSource(header) + "`", {
                index: section.range[0]
            }));
        });
    });
};
//# sourceMappingURL=textlint-rule-no-empty-section.js.map