{"version":3,"file":"index.production.js","sources":["../../../autocomplete-shared/dist/esm/generateAutocompleteId.js","../../../autocomplete-shared/dist/esm/getItemsCount.js","../../src/utils/flatten.ts","../../src/utils/getNextActiveItemId.ts","../../src/utils/noop.ts","../../src/utils/getActiveItem.ts","../../src/utils/isOrContainsNode.ts","../../src/getDefaultProps.ts","../../src/utils/getNormalizedSources.ts","../../src/resolve.ts","../../src/utils/mapToAlgoliaResponse.ts","../../src/onInput.ts","../../src/getPropGetters.ts","../../src/onKeyDown.ts","../../src/getCompletion.ts","../../src/stateReducer.ts","../../src/createAutocomplete.ts","../../src/createStore.ts","../../src/getAutocompleteSetters.ts","../../src/version.ts"],"sourcesContent":["var autocompleteId = 0;\nexport function generateAutocompleteId() {\n  return \"autocomplete-\".concat(autocompleteId++);\n}","export function getItemsCount(state) {\n  if (state.collections.length === 0) {\n    return 0;\n  }\n\n  return state.collections.reduce(function (sum, collection) {\n    return sum + collection.items.length;\n  }, 0);\n}","export function flatten<TType>(values: Array<TType | TType[]>): TType[] {\n  return values.reduce<TType[]>((a, b) => {\n    return a.concat(b);\n  }, []);\n}\n","/**\n * Returns the next active item ID from the current state.\n *\n * We allow circular keyboard navigation from the base index.\n * The base index can either be `null` (nothing is highlighted) or `0`\n * (the first item is highlighted).\n * The base index is allowed to get assigned `null` only if\n * `props.defaultActiveItemId` is `null`. This pattern allows to \"stop\"\n * by the actual query before navigating to other suggestions as seen on\n * Google or Amazon.\n *\n * @param moveAmount The offset to increment (or decrement) the last index\n * @param baseIndex The current index to compute the next index from\n * @param itemCount The number of items\n * @param defaultActiveItemId The default active index to fallback to\n */\nexport function getNextActiveItemId(\n  moveAmount: number,\n  baseIndex: number | null,\n  itemCount: number,\n  defaultActiveItemId: number | null\n): number | null {\n  if (\n    moveAmount < 0 &&\n    (baseIndex === null || (defaultActiveItemId !== null && baseIndex === 0))\n  ) {\n    return itemCount + moveAmount;\n  }\n\n  const numericIndex = (baseIndex === null ? -1 : baseIndex) + moveAmount;\n\n  if (numericIndex <= -1 || numericIndex >= itemCount) {\n    return defaultActiveItemId === null ? null : 0;\n  }\n\n  return numericIndex;\n}\n","export const noop = () => {};\n","import { AutocompleteCollection, AutocompleteState, BaseItem } from '../types';\n\n// We don't have access to the autocomplete source when we call `onKeyDown`\n// or `onClick` because those are native browser events.\n// However, we can get the source from the suggestion index.\nfunction getCollectionFromActiveItemId<TItem extends BaseItem>(\n  state: AutocompleteState<TItem>\n): AutocompleteCollection<TItem> | undefined {\n  // Given 3 sources with respectively 1, 2 and 3 suggestions: [1, 2, 3]\n  // We want to get the accumulated counts:\n  // [1, 1 + 2, 1 + 2 + 3] = [1, 3, 3 + 3] = [1, 3, 6]\n  const accumulatedCollectionsCount = state.collections\n    .map((collections) => collections.items.length)\n    .reduce<number[]>((acc, collectionsCount, index) => {\n      const previousValue = acc[index - 1] || 0;\n      const nextValue = previousValue + collectionsCount;\n\n      acc.push(nextValue);\n\n      return acc;\n    }, []);\n\n  // Based on the accumulated counts, we can infer the index of the suggestion.\n  const collectionIndex = accumulatedCollectionsCount.reduce((acc, current) => {\n    if (current <= state.activeItemId!) {\n      return acc + 1;\n    }\n\n    return acc;\n  }, 0);\n\n  return state.collections[collectionIndex];\n}\n\n/**\n * Gets the highlighted index relative to a suggestion object (not the absolute\n * highlighted index).\n *\n * Example:\n *  [['a', 'b'], ['c', 'd', 'e'], ['f']]\n *                      â†‘\n *         (absolute: 3, relative: 1)\n */\nfunction getRelativeActiveItemId<TItem extends BaseItem>({\n  state,\n  collection,\n}: {\n  state: AutocompleteState<TItem>;\n  collection: AutocompleteCollection<TItem>;\n}): number {\n  let isOffsetFound = false;\n  let counter = 0;\n  let previousItemsOffset = 0;\n\n  while (isOffsetFound === false) {\n    const currentCollection = state.collections[counter];\n\n    if (currentCollection === collection) {\n      isOffsetFound = true;\n      break;\n    }\n\n    previousItemsOffset += currentCollection.items.length;\n\n    counter++;\n  }\n\n  return state.activeItemId! - previousItemsOffset;\n}\n\nexport function getActiveItem<TItem extends BaseItem>(\n  state: AutocompleteState<TItem>\n) {\n  const collection = getCollectionFromActiveItemId(state);\n\n  if (!collection) {\n    return null;\n  }\n\n  const item = collection.items[getRelativeActiveItemId({ state, collection })];\n  const source = collection.source;\n  const itemInputValue = source.getItemInputValue({ item, state });\n  const itemUrl = source.getItemUrl({ item, state });\n\n  return {\n    item,\n    itemInputValue,\n    itemUrl,\n    source,\n  };\n}\n","export function isOrContainsNode(parent: Node, child: Node) {\n  return parent === child || parent.contains(child);\n}\n","import {\n  getItemsCount,\n  generateAutocompleteId,\n} from '@algolia/autocomplete-shared';\n\nimport {\n  AutocompleteEnvironment,\n  AutocompleteOptions,\n  AutocompleteSubscribers,\n  BaseItem,\n  InternalAutocompleteOptions,\n} from './types';\nimport { getNormalizedSources, flatten } from './utils';\n\nexport function getDefaultProps<TItem extends BaseItem>(\n  props: AutocompleteOptions<TItem>,\n  pluginSubscribers: AutocompleteSubscribers<TItem>\n): InternalAutocompleteOptions<TItem> {\n  /* eslint-disable no-restricted-globals */\n  const environment: AutocompleteEnvironment = (typeof window !== 'undefined'\n    ? window\n    : {}) as typeof window;\n  /* eslint-enable no-restricted-globals */\n  const plugins = props.plugins || [];\n\n  return {\n    debug: false,\n    openOnFocus: false,\n    placeholder: '',\n    autoFocus: false,\n    defaultActiveItemId: null,\n    stallThreshold: 300,\n    environment,\n    shouldPanelOpen: ({ state }) => getItemsCount(state) > 0,\n    ...props,\n    // Since `generateAutocompleteId` triggers a side effect (it increments\n    // an internal counter), we don't want to execute it if unnecessary.\n    id: props.id ?? generateAutocompleteId(),\n    plugins,\n    // The following props need to be deeply defaulted.\n    initialState: {\n      activeItemId: null,\n      query: '',\n      completion: null,\n      collections: [],\n      isOpen: false,\n      status: 'idle',\n      context: {},\n      ...props.initialState,\n    },\n    onStateChange(params) {\n      props.onStateChange?.(params);\n      plugins.forEach((x) => x.onStateChange?.(params));\n    },\n    onSubmit(params) {\n      props.onSubmit?.(params);\n      plugins.forEach((x) => x.onSubmit?.(params));\n    },\n    onReset(params) {\n      props.onReset?.(params);\n      plugins.forEach((x) => x.onReset?.(params));\n    },\n    getSources(params) {\n      return Promise.all(\n        [...plugins.map((plugin) => plugin.getSources), props.getSources]\n          .filter(Boolean)\n          .map((getSources) => getNormalizedSources(getSources!, params))\n      )\n        .then((nested) => flatten(nested))\n        .then((sources) =>\n          sources.map((source) => ({\n            ...source,\n            onSelect(params) {\n              source.onSelect(params);\n              pluginSubscribers.forEach((x) => x.onSelect?.(params));\n            },\n            onActive(params) {\n              source.onActive(params);\n              pluginSubscribers.forEach((x) => x.onActive?.(params));\n            },\n          }))\n        );\n    },\n    navigator: {\n      navigate({ itemUrl }) {\n        environment.location.assign(itemUrl);\n      },\n      navigateNewTab({ itemUrl }) {\n        const windowReference = environment.open(itemUrl, '_blank', 'noopener');\n        windowReference?.focus();\n      },\n      navigateNewWindow({ itemUrl }) {\n        environment.open(itemUrl, '_blank', 'noopener');\n      },\n      ...props.navigator,\n    },\n  };\n}\n","import { invariant } from '@algolia/autocomplete-shared';\n\nimport {\n  AutocompleteSource,\n  BaseItem,\n  GetSources,\n  GetSourcesParams,\n  InternalAutocompleteSource,\n  InternalGetSources,\n} from '../types';\n\nimport { noop } from './noop';\n\nexport function getNormalizedSources<TItem extends BaseItem>(\n  getSources: GetSources<TItem>,\n  params: GetSourcesParams<TItem>\n): ReturnType<InternalGetSources<TItem>> {\n  const seenSourceIds: string[] = [];\n\n  return Promise.resolve(getSources(params)).then((sources) => {\n    invariant(\n      Array.isArray(sources),\n      `The \\`getSources\\` function must return an array of sources but returned type ${JSON.stringify(\n        typeof sources\n      )}:\\n\\n${JSON.stringify(sources, null, 2)}`\n    );\n\n    return Promise.all(\n      sources\n        // We allow `undefined` and `false` sources to allow users to use\n        // `Boolean(query) && source` (=> `false`).\n        // We need to remove these values at this point.\n        .filter((maybeSource: any): maybeSource is AutocompleteSource<TItem> =>\n          Boolean(maybeSource)\n        )\n        .map((source) => {\n          invariant(\n            typeof source.sourceId === 'string',\n            'A source must provide a `sourceId` string.'\n          );\n\n          if (seenSourceIds.includes(source.sourceId)) {\n            throw new Error(\n              `[Autocomplete] The \\`sourceId\\` ${JSON.stringify(\n                source.sourceId\n              )} is not unique.`\n            );\n          }\n\n          seenSourceIds.push(source.sourceId);\n\n          const normalizedSource: InternalAutocompleteSource<TItem> = {\n            getItemInputValue({ state }) {\n              return state.query;\n            },\n            getItemUrl() {\n              return undefined;\n            },\n            onSelect({ setIsOpen }) {\n              setIsOpen(false);\n            },\n            onActive: noop,\n            ...source,\n          };\n\n          return Promise.resolve(normalizedSource);\n        })\n    );\n  });\n}\n","import type {\n  Execute,\n  ExecuteResponse,\n  RequesterDescription,\n  TransformResponse,\n} from '@algolia/autocomplete-preset-algolia';\nimport { invariant } from '@algolia/autocomplete-shared';\nimport {\n  MultipleQueriesQuery,\n  SearchForFacetValuesResponse,\n  SearchResponse,\n} from '@algolia/client-search';\nimport type { SearchClient } from 'algoliasearch/lite';\n\nimport { BaseItem, InternalAutocompleteSource } from './types';\nimport { flatten, mapToAlgoliaResponse } from './utils';\n\nfunction isDescription<TItem extends BaseItem>(\n  item:\n    | RequestDescriptionPreResolved<TItem>\n    | RequestDescriptionPreResolvedCustom<TItem>\n    | PackedDescription<TItem>\n): item is RequestDescriptionPreResolved<TItem> {\n  return Boolean((item as RequestDescriptionPreResolved<TItem>).execute);\n}\n\nfunction isRequesterDescription<TItem extends BaseItem>(\n  description: TItem[] | TItem[][] | RequesterDescription<TItem>\n): description is RequesterDescription<TItem> {\n  return Boolean((description as RequesterDescription<TItem>).execute);\n}\n\ntype PackedDescription<TItem extends BaseItem> = {\n  searchClient: SearchClient;\n  execute: Execute<TItem>;\n  items: RequestDescriptionPreResolved<TItem>['requests'];\n};\n\ntype RequestDescriptionPreResolved<TItem extends BaseItem> = Pick<\n  RequesterDescription<TItem>,\n  'execute' | 'searchClient' | 'transformResponse'\n> & {\n  requests: Array<{\n    query: MultipleQueriesQuery;\n    sourceId: string;\n    transformResponse: TransformResponse<TItem>;\n  }>;\n};\n\ntype RequestDescriptionPreResolvedCustom<TItem extends BaseItem> = {\n  items: TItem[] | TItem[][];\n  sourceId: string;\n  transformResponse?: undefined;\n};\n\nexport function preResolve<TItem extends BaseItem>(\n  itemsOrDescription: TItem[] | TItem[][] | RequesterDescription<TItem>,\n  sourceId: string\n):\n  | RequestDescriptionPreResolved<TItem>\n  | RequestDescriptionPreResolvedCustom<TItem> {\n  if (isRequesterDescription<TItem>(itemsOrDescription)) {\n    return {\n      ...itemsOrDescription,\n      requests: itemsOrDescription.queries.map((query) => ({\n        query,\n        sourceId,\n        transformResponse: itemsOrDescription.transformResponse,\n      })),\n    };\n  }\n\n  return {\n    items: itemsOrDescription,\n    sourceId,\n  };\n}\n\nexport function resolve<TItem extends BaseItem>(\n  items: Array<\n    | RequestDescriptionPreResolved<TItem>\n    | RequestDescriptionPreResolvedCustom<TItem>\n  >\n) {\n  const packed = items.reduce<\n    Array<RequestDescriptionPreResolvedCustom<TItem> | PackedDescription<TItem>>\n  >((acc, current) => {\n    if (!isDescription(current)) {\n      acc.push(current);\n      return acc;\n    }\n\n    const { searchClient, execute, requests } = current;\n\n    const container = acc.find<PackedDescription<TItem>>(\n      (item): item is PackedDescription<TItem> => {\n        return (\n          isDescription(current) &&\n          isDescription(item) &&\n          item.searchClient === searchClient &&\n          item.execute === execute\n        );\n      }\n    );\n\n    if (container) {\n      container.items.push(...requests);\n    } else {\n      const request: PackedDescription<TItem> = {\n        execute,\n        items: requests,\n        searchClient,\n      };\n      acc.push(request);\n    }\n\n    return acc;\n  }, []);\n\n  const values = packed.map<\n    | Promise<RequestDescriptionPreResolvedCustom<TItem>>\n    | ReturnType<Execute<TItem>>\n  >((maybeDescription) => {\n    if (!isDescription<TItem>(maybeDescription)) {\n      return Promise.resolve(\n        maybeDescription as RequestDescriptionPreResolvedCustom<TItem>\n      );\n    }\n\n    const {\n      execute,\n      items,\n      searchClient,\n    } = maybeDescription as PackedDescription<TItem>;\n\n    return execute({\n      searchClient,\n      requests: items,\n    });\n  });\n\n  return Promise.all<\n    RequestDescriptionPreResolvedCustom<TItem> | ExecuteResponse<TItem>\n  >(values).then((responses) =>\n    flatten<\n      RequestDescriptionPreResolvedCustom<TItem> | ExecuteResponse<TItem>[0]\n    >(responses)\n  );\n}\n\nexport function postResolve<TItem extends BaseItem>(\n  responses: Array<\n    RequestDescriptionPreResolvedCustom<TItem> | ExecuteResponse<TItem>[0]\n  >,\n  sources: Array<InternalAutocompleteSource<TItem>>\n) {\n  return sources.map((source) => {\n    const matches = responses.filter(\n      (response) => response.sourceId === source.sourceId\n    );\n    const results = matches.map(({ items }) => items);\n    const transform = matches[0].transformResponse;\n    const items = transform\n      ? transform(\n          mapToAlgoliaResponse(\n            results as Array<\n              SearchForFacetValuesResponse | SearchResponse<TItem>\n            >\n          )\n        )\n      : results;\n\n    invariant(\n      Array.isArray(items),\n      `The \\`getItems\\` function must return an array of items but returned type ${JSON.stringify(\n        typeof items\n      )}:\\n\\n${JSON.stringify(items, null, 2)}`\n    );\n\n    return {\n      source,\n      items,\n    };\n  });\n}\n","import type {\n  SearchForFacetValuesResponse,\n  SearchResponse,\n} from '@algolia/client-search';\n\nexport function mapToAlgoliaResponse<THit>(\n  rawResults: Array<SearchResponse<THit> | SearchForFacetValuesResponse>\n) {\n  const results: Array<\n    SearchResponse<THit> | SearchForFacetValuesResponse\n  > = rawResults.map((result) => {\n    return {\n      ...result,\n      hits: (result as SearchResponse<THit>).hits?.map((hit) => {\n        // Bring support for the Insights plugin.\n        return {\n          ...hit,\n          __autocomplete_indexName: (result as SearchResponse<THit>).index,\n          __autocomplete_queryID: (result as SearchResponse<THit>).queryID,\n        };\n      }),\n    };\n  });\n\n  return {\n    results,\n    hits: results\n      .map((result) => (result as SearchResponse<THit>).hits)\n      .filter(Boolean),\n    facetHits: results\n      .map((result) =>\n        (result as SearchForFacetValuesResponse).facetHits?.map((facetHit) => {\n          // Bring support for the highlighting components.\n          return {\n            label: facetHit.value,\n            count: facetHit.count,\n            _highlightResult: {\n              label: {\n                value: facetHit.highlighted,\n              },\n            },\n          };\n        })\n      )\n      .filter(Boolean),\n  };\n}\n","import { preResolve, resolve, postResolve } from './resolve';\nimport {\n  AutocompleteScopeApi,\n  AutocompleteState,\n  AutocompleteStore,\n  BaseItem,\n  InternalAutocompleteOptions,\n} from './types';\nimport { getActiveItem } from './utils';\n\nlet lastStalledId: number | null = null;\n\ninterface OnInputParams<TItem extends BaseItem>\n  extends AutocompleteScopeApi<TItem> {\n  event: any;\n  /**\n   * The next partial state to apply after the function is called.\n   *\n   * This is useful when we call `onInput` in a different scenario than an\n   * actual input. For example, we use `onInput` when we click on an item,\n   * but we want to close the panel in that case.\n   */\n  nextState?: Partial<AutocompleteState<TItem>>;\n  props: InternalAutocompleteOptions<TItem>;\n  query: string;\n  store: AutocompleteStore<TItem>;\n}\n\nexport function onInput<TItem extends BaseItem>({\n  event,\n  nextState = {},\n  props,\n  query,\n  refresh,\n  store,\n  ...setters\n}: OnInputParams<TItem>): Promise<void> {\n  if (lastStalledId) {\n    props.environment.clearTimeout(lastStalledId);\n  }\n\n  const {\n    setCollections,\n    setIsOpen,\n    setQuery,\n    setActiveItemId,\n    setStatus,\n  } = setters;\n\n  setQuery(query);\n  setActiveItemId(props.defaultActiveItemId);\n\n  if (!query && props.openOnFocus === false) {\n    setStatus('idle');\n    setCollections(\n      store.getState().collections.map((collection) => ({\n        ...collection,\n        items: [],\n      }))\n    );\n    setIsOpen(\n      nextState.isOpen ?? props.shouldPanelOpen({ state: store.getState() })\n    );\n\n    return Promise.resolve();\n  }\n\n  setStatus('loading');\n\n  lastStalledId = props.environment.setTimeout(() => {\n    setStatus('stalled');\n  }, props.stallThreshold);\n\n  return props\n    .getSources({\n      query,\n      refresh,\n      state: store.getState(),\n      ...setters,\n    })\n    .then((sources) => {\n      setStatus('loading');\n\n      return Promise.all(\n        sources.map((source) => {\n          return Promise.resolve(\n            source.getItems({\n              query,\n              refresh,\n              state: store.getState(),\n              ...setters,\n            })\n          ).then((itemsOrDescription) =>\n            preResolve<TItem>(itemsOrDescription, source.sourceId)\n          );\n        })\n      )\n        .then(resolve)\n        .then((responses) => postResolve(responses, sources))\n        .then((collections) => {\n          setStatus('idle');\n          setCollections(collections as any);\n          const isPanelOpen = props.shouldPanelOpen({\n            state: store.getState(),\n          });\n          setIsOpen(\n            nextState.isOpen ??\n              ((props.openOnFocus && !query && isPanelOpen) || isPanelOpen)\n          );\n\n          const highlightedItem = getActiveItem(store.getState());\n\n          if (store.getState().activeItemId !== null && highlightedItem) {\n            const { item, itemInputValue, itemUrl, source } = highlightedItem;\n\n            source.onActive({\n              event,\n              item,\n              itemInputValue,\n              itemUrl,\n              refresh,\n              source,\n              state: store.getState(),\n              ...setters,\n            });\n          }\n        })\n        .finally(() => {\n          if (lastStalledId) {\n            props.environment.clearTimeout(lastStalledId);\n          }\n        });\n    });\n}\n","import { onInput } from './onInput';\nimport { onKeyDown } from './onKeyDown';\nimport {\n  AutocompleteScopeApi,\n  AutocompleteStore,\n  BaseItem,\n  GetEnvironmentProps,\n  GetFormProps,\n  GetInputProps,\n  GetItemProps,\n  GetLabelProps,\n  GetListProps,\n  GetPanelProps,\n  GetRootProps,\n  InternalAutocompleteOptions,\n} from './types';\nimport { getActiveItem, isOrContainsNode } from './utils';\n\ninterface GetPropGettersOptions<TItem extends BaseItem>\n  extends AutocompleteScopeApi<TItem> {\n  store: AutocompleteStore<TItem>;\n  props: InternalAutocompleteOptions<TItem>;\n}\n\nexport function getPropGetters<\n  TItem extends BaseItem,\n  TEvent,\n  TMouseEvent,\n  TKeyboardEvent\n>({ props, refresh, store, ...setters }: GetPropGettersOptions<TItem>) {\n  const getEnvironmentProps: GetEnvironmentProps = (providedProps) => {\n    const { inputElement, formElement, panelElement, ...rest } = providedProps;\n\n    return {\n      // On touch devices, we do not rely on the native `blur` event of the\n      // input to close the panel, but rather on a custom `touchstart` event\n      // outside of the autocomplete elements.\n      // This ensures a working experience on mobile because we blur the input\n      // on touch devices when the user starts scrolling (`touchmove`).\n      onTouchStart(event) {\n        if (\n          store.getState().isOpen === false ||\n          event.target === inputElement\n        ) {\n          return;\n        }\n\n        // @TODO: support cases where there are multiple Autocomplete instances.\n        // Right now, a second instance makes this computation return false.\n        const isTargetWithinAutocomplete = [formElement, panelElement].some(\n          (contextNode) => {\n            return (\n              isOrContainsNode(contextNode, event.target as Node) ||\n              isOrContainsNode(\n                contextNode,\n                props.environment.document.activeElement!\n              )\n            );\n          }\n        );\n\n        if (isTargetWithinAutocomplete === false) {\n          store.dispatch('blur', null);\n        }\n      },\n      // When scrolling on touch devices (mobiles, tablets, etc.), we want to\n      // mimic the native platform behavior where the input is blurred to\n      // hide the virtual keyboard. This gives more vertical space to\n      // discover all the suggestions showing up in the panel.\n      onTouchMove(event: TouchEvent) {\n        if (\n          store.getState().isOpen === false ||\n          inputElement !== props.environment.document.activeElement ||\n          event.target === inputElement\n        ) {\n          return;\n        }\n\n        inputElement.blur();\n      },\n      ...rest,\n    };\n  };\n\n  const getRootProps: GetRootProps = (rest) => {\n    return {\n      role: 'combobox',\n      'aria-expanded': store.getState().isOpen,\n      'aria-haspopup': 'listbox',\n      'aria-owns': store.getState().isOpen ? `${props.id}-list` : undefined,\n      'aria-labelledby': `${props.id}-label`,\n      ...rest,\n    };\n  };\n\n  const getFormProps: GetFormProps<TEvent> = (providedProps) => {\n    const { inputElement, ...rest } = providedProps;\n\n    return {\n      action: '',\n      noValidate: true,\n      role: 'search',\n      onSubmit: (event) => {\n        ((event as unknown) as Event).preventDefault();\n\n        props.onSubmit({\n          event,\n          refresh,\n          state: store.getState(),\n          ...setters,\n        });\n\n        store.dispatch('submit', null);\n        providedProps.inputElement?.blur();\n      },\n      onReset: (event) => {\n        ((event as unknown) as Event).preventDefault();\n\n        props.onReset({\n          event,\n          refresh,\n          state: store.getState(),\n          ...setters,\n        });\n\n        store.dispatch('reset', null);\n        providedProps.inputElement?.focus();\n      },\n      ...rest,\n    };\n  };\n\n  const getInputProps: GetInputProps<TEvent, TMouseEvent, TKeyboardEvent> = (\n    providedProps\n  ) => {\n    function onFocus(event: TEvent) {\n      // We want to trigger a query when `openOnFocus` is true\n      // because the panel should open with the current query.\n      if (props.openOnFocus || Boolean(store.getState().query)) {\n        onInput({\n          event,\n          props,\n          query: store.getState().completion || store.getState().query,\n          refresh,\n          store,\n          ...setters,\n        });\n      }\n\n      store.dispatch('focus', null);\n    }\n\n    const isTouchDevice = 'ontouchstart' in props.environment;\n    const { inputElement, maxLength = 512, ...rest } = providedProps || {};\n    const activeItem = getActiveItem(store.getState());\n\n    return {\n      'aria-autocomplete': 'both',\n      'aria-activedescendant':\n        store.getState().isOpen && store.getState().activeItemId !== null\n          ? `${props.id}-item-${store.getState().activeItemId}`\n          : undefined,\n      'aria-controls': store.getState().isOpen ? `${props.id}-list` : undefined,\n      'aria-labelledby': `${props.id}-label`,\n      value: store.getState().completion || store.getState().query,\n      id: `${props.id}-input`,\n      autoComplete: 'off',\n      autoCorrect: 'off',\n      autoCapitalize: 'off',\n      enterKeyHint: activeItem?.itemUrl ? 'go' : 'search',\n      spellCheck: 'false',\n      autoFocus: props.autoFocus,\n      placeholder: props.placeholder,\n      maxLength,\n      type: 'search',\n      onChange: (event) => {\n        onInput({\n          event,\n          props,\n          query: (((event as unknown) as Event)\n            .currentTarget as HTMLInputElement).value.slice(0, maxLength),\n          refresh,\n          store,\n          ...setters,\n        });\n      },\n      onKeyDown: (event) => {\n        onKeyDown({\n          event: (event as unknown) as KeyboardEvent,\n          props,\n          refresh,\n          store,\n          ...setters,\n        });\n      },\n      onFocus,\n      onBlur: () => {\n        // We do rely on the `blur` event on touch devices.\n        // See explanation in `onTouchStart`.\n        if (!isTouchDevice) {\n          store.dispatch('blur', null);\n        }\n      },\n      onClick: (event) => {\n        // When the panel is closed and you click on the input while\n        // the input is focused, the `onFocus` event is not triggered\n        // (default browser behavior).\n        // In an autocomplete context, it makes sense to open the panel in this\n        // case.\n        // We mimic this event by catching the `onClick` event which\n        // triggers the `onFocus` for the panel to open.\n        if (\n          providedProps.inputElement ===\n            props.environment.document.activeElement &&\n          !store.getState().isOpen\n        ) {\n          onFocus((event as unknown) as TEvent);\n        }\n      },\n      ...rest,\n    };\n  };\n\n  const getLabelProps: GetLabelProps = (rest) => {\n    return {\n      htmlFor: `${props.id}-input`,\n      id: `${props.id}-label`,\n      ...rest,\n    };\n  };\n\n  const getListProps: GetListProps = (rest) => {\n    return {\n      role: 'listbox',\n      'aria-labelledby': `${props.id}-label`,\n      id: `${props.id}-list`,\n      ...rest,\n    };\n  };\n\n  const getPanelProps: GetPanelProps<TMouseEvent> = (rest) => {\n    return {\n      onMouseDown(event) {\n        // Prevents the `activeElement` from being changed to the panel so\n        // that the blur event is not triggered, otherwise it closes the\n        // panel.\n        ((event as unknown) as MouseEvent).preventDefault();\n      },\n      onMouseLeave() {\n        store.dispatch('mouseleave', null);\n      },\n      ...rest,\n    };\n  };\n\n  const getItemProps: GetItemProps<any, TMouseEvent> = (providedProps) => {\n    const { item, source, ...rest } = providedProps;\n\n    return {\n      id: `${props.id}-item-${item.__autocomplete_id}`,\n      role: 'option',\n      'aria-selected': store.getState().activeItemId === item.__autocomplete_id,\n      onMouseMove(event) {\n        if (item.__autocomplete_id === store.getState().activeItemId) {\n          return;\n        }\n\n        store.dispatch('mousemove', item.__autocomplete_id);\n\n        const activeItem = getActiveItem(store.getState());\n\n        if (store.getState().activeItemId !== null && activeItem) {\n          const { item, itemInputValue, itemUrl, source } = activeItem;\n\n          source.onActive({\n            event,\n            item,\n            itemInputValue,\n            itemUrl,\n            refresh,\n            source,\n            state: store.getState(),\n            ...setters,\n          });\n        }\n      },\n      onMouseDown(event) {\n        // Prevents the `activeElement` from being changed to the item so it\n        // can remain with the current `activeElement`.\n        ((event as unknown) as MouseEvent).preventDefault();\n      },\n      onClick(event) {\n        const itemInputValue = source.getItemInputValue({\n          item,\n          state: store.getState(),\n        });\n        const itemUrl = source.getItemUrl({\n          item,\n          state: store.getState(),\n        });\n\n        // If `getItemUrl` is provided, it means that the suggestion\n        // is a link, not plain text that aims at updating the query.\n        // We can therefore skip the state change because it will update\n        // the `activeItemId`, resulting in a UI flash, especially\n        // noticeable on mobile.\n        const runPreCommand = itemUrl\n          ? Promise.resolve()\n          : onInput({\n              event,\n              nextState: { isOpen: false },\n              props,\n              query: itemInputValue,\n              refresh,\n              store,\n              ...setters,\n            });\n\n        runPreCommand.then(() => {\n          source.onSelect({\n            event,\n            item,\n            itemInputValue,\n            itemUrl,\n            refresh,\n            source,\n            state: store.getState(),\n            ...setters,\n          });\n        });\n      },\n      ...rest,\n    };\n  };\n\n  return {\n    getEnvironmentProps,\n    getRootProps,\n    getFormProps,\n    getLabelProps,\n    getInputProps,\n    getPanelProps,\n    getListProps,\n    getItemProps,\n  };\n}\n","import { onInput } from './onInput';\nimport {\n  AutocompleteScopeApi,\n  AutocompleteStore,\n  BaseItem,\n  InternalAutocompleteOptions,\n} from './types';\nimport { getActiveItem } from './utils';\n\ninterface OnKeyDownOptions<TItem extends BaseItem>\n  extends AutocompleteScopeApi<TItem> {\n  event: KeyboardEvent;\n  props: InternalAutocompleteOptions<TItem>;\n  store: AutocompleteStore<TItem>;\n}\n\nexport function onKeyDown<TItem extends BaseItem>({\n  event,\n  props,\n  refresh,\n  store,\n  ...setters\n}: OnKeyDownOptions<TItem>): void {\n  if (event.key === 'ArrowUp' || event.key === 'ArrowDown') {\n    // Default browser behavior changes the caret placement on ArrowUp and\n    // Arrow down.\n    event.preventDefault();\n\n    store.dispatch(event.key, null);\n\n    const nodeItem = props.environment.document.getElementById(\n      `${props.id}-item-${store.getState().activeItemId}`\n    );\n\n    if (nodeItem) {\n      if ((nodeItem as any).scrollIntoViewIfNeeded) {\n        (nodeItem as any).scrollIntoViewIfNeeded(false);\n      } else {\n        nodeItem.scrollIntoView(false);\n      }\n    }\n\n    const highlightedItem = getActiveItem(store.getState());\n\n    if (store.getState().activeItemId !== null && highlightedItem) {\n      const { item, itemInputValue, itemUrl, source } = highlightedItem;\n\n      source.onActive({\n        event,\n        item,\n        itemInputValue,\n        itemUrl,\n        refresh,\n        source,\n        state: store.getState(),\n        ...setters,\n      });\n    }\n  } else if (event.key === 'Escape') {\n    // This prevents the default browser behavior on `input[type=\"search\"]`\n    // from removing the query right away because we first want to close the\n    // panel.\n    event.preventDefault();\n\n    store.dispatch(event.key, null);\n  } else if (event.key === 'Enter') {\n    // No active item, so we let the browser handle the native `onSubmit` form\n    // event.\n    if (\n      store.getState().activeItemId === null ||\n      store\n        .getState()\n        .collections.every((collection) => collection.items.length === 0)\n    ) {\n      return;\n    }\n\n    // This prevents the `onSubmit` event to be sent because an item is\n    // highlighted.\n    event.preventDefault();\n\n    const { item, itemInputValue, itemUrl, source } = getActiveItem(\n      store.getState()\n    )!;\n\n    if (event.metaKey || event.ctrlKey) {\n      if (itemUrl !== undefined) {\n        source.onSelect({\n          event,\n          item,\n          itemInputValue,\n          itemUrl,\n          refresh,\n          source,\n          state: store.getState(),\n          ...setters,\n        });\n        props.navigator.navigateNewTab({\n          itemUrl,\n          item,\n          state: store.getState(),\n        });\n      }\n    } else if (event.shiftKey) {\n      if (itemUrl !== undefined) {\n        source.onSelect({\n          event,\n          item,\n          itemInputValue,\n          itemUrl,\n          refresh,\n          source,\n          state: store.getState(),\n          ...setters,\n        });\n        props.navigator.navigateNewWindow({\n          itemUrl,\n          item,\n          state: store.getState(),\n        });\n      }\n    } else if (event.altKey) {\n      // Keep native browser behavior\n    } else {\n      if (itemUrl !== undefined) {\n        source.onSelect({\n          event,\n          item,\n          itemInputValue,\n          itemUrl,\n          refresh,\n          source,\n          state: store.getState(),\n          ...setters,\n        });\n        props.navigator.navigate({\n          itemUrl,\n          item,\n          state: store.getState(),\n        });\n\n        return;\n      }\n\n      onInput({\n        event,\n        nextState: { isOpen: false },\n        props,\n        query: itemInputValue,\n        refresh,\n        store,\n        ...setters,\n      }).then(() => {\n        source.onSelect({\n          event,\n          item,\n          itemInputValue,\n          itemUrl,\n          refresh,\n          source,\n          state: store.getState(),\n          ...setters,\n        });\n      });\n    }\n  }\n}\n","import { AutocompleteState, BaseItem } from './types';\nimport { getActiveItem } from './utils';\n\ninterface GetCompletionProps<TItem extends BaseItem> {\n  state: AutocompleteState<TItem>;\n}\n\nexport function getCompletion<TItem extends BaseItem>({\n  state,\n}: GetCompletionProps<TItem>): string | null {\n  if (state.isOpen === false || state.activeItemId === null) {\n    return null;\n  }\n\n  const { itemInputValue } = getActiveItem(state)!;\n\n  return itemInputValue || null;\n}\n","import { getItemsCount, invariant } from '@algolia/autocomplete-shared';\n\nimport { getCompletion } from './getCompletion';\nimport { Reducer } from './types';\nimport { getNextActiveItemId } from './utils';\n\nexport const stateReducer: Reducer = (state, action) => {\n  switch (action.type) {\n    case 'setActiveItemId': {\n      return {\n        ...state,\n        activeItemId: action.payload,\n      };\n    }\n\n    case 'setQuery': {\n      return {\n        ...state,\n        query: action.payload,\n        completion: null,\n      };\n    }\n\n    case 'setCollections': {\n      return {\n        ...state,\n        collections: action.payload,\n      };\n    }\n\n    case 'setIsOpen': {\n      return {\n        ...state,\n        isOpen: action.payload,\n      };\n    }\n\n    case 'setStatus': {\n      return {\n        ...state,\n        status: action.payload,\n      };\n    }\n\n    case 'setContext': {\n      return {\n        ...state,\n        context: {\n          ...state.context,\n          ...action.payload,\n        },\n      };\n    }\n\n    case 'ArrowDown': {\n      const nextState = {\n        ...state,\n        activeItemId: getNextActiveItemId(\n          1,\n          state.activeItemId,\n          getItemsCount(state),\n          action.props.defaultActiveItemId\n        ),\n      };\n\n      return {\n        ...nextState,\n        completion: getCompletion({ state: nextState }),\n      };\n    }\n\n    case 'ArrowUp': {\n      const nextState = {\n        ...state,\n        activeItemId: getNextActiveItemId(\n          -1,\n          state.activeItemId,\n          getItemsCount(state),\n          action.props.defaultActiveItemId\n        ),\n      };\n\n      return {\n        ...nextState,\n        completion: getCompletion({ state: nextState }),\n      };\n    }\n\n    case 'Escape': {\n      if (state.isOpen) {\n        return {\n          ...state,\n          isOpen: false,\n          completion: null,\n        };\n      }\n\n      return {\n        ...state,\n        query: '',\n        status: 'idle',\n        collections: [],\n      };\n    }\n\n    case 'submit': {\n      return {\n        ...state,\n        activeItemId: null,\n        isOpen: false,\n        status: 'idle',\n      };\n    }\n\n    case 'reset': {\n      return {\n        ...state,\n        activeItemId:\n          // Since we open the panel on reset when openOnFocus=true\n          // we need to restore the highlighted index to the defaultActiveItemId. (DocSearch use-case)\n\n          // Since we close the panel when openOnFocus=false\n          // we lose track of the highlighted index. (Query-suggestions use-case)\n          action.props.openOnFocus === true\n            ? action.props.defaultActiveItemId\n            : null,\n        status: 'idle',\n        query: '',\n      };\n    }\n\n    case 'focus': {\n      return {\n        ...state,\n        activeItemId: action.props.defaultActiveItemId,\n        isOpen:\n          (action.props.openOnFocus || Boolean(state.query)) &&\n          action.props.shouldPanelOpen({ state }),\n      };\n    }\n\n    case 'blur': {\n      if (action.props.debug) {\n        return state;\n      }\n\n      return {\n        ...state,\n        isOpen: false,\n        activeItemId: null,\n      };\n    }\n\n    case 'mousemove': {\n      return {\n        ...state,\n        activeItemId: action.payload,\n      };\n    }\n\n    case 'mouseleave': {\n      return {\n        ...state,\n        activeItemId: action.props.defaultActiveItemId,\n      };\n    }\n\n    default:\n      invariant(\n        false,\n        `The reducer action ${JSON.stringify(action.type)} is not supported.`\n      );\n\n      return state;\n  }\n};\n","import { checkOptions } from './checkOptions';\nimport { createStore } from './createStore';\nimport { getAutocompleteSetters } from './getAutocompleteSetters';\nimport { getDefaultProps } from './getDefaultProps';\nimport { getPropGetters } from './getPropGetters';\nimport { onInput } from './onInput';\nimport { stateReducer } from './stateReducer';\nimport {\n  AutocompleteApi,\n  AutocompleteOptions,\n  BaseItem,\n  AutocompleteSubscribers,\n} from './types';\n\nexport function createAutocomplete<\n  TItem extends BaseItem,\n  TEvent = Event,\n  TMouseEvent = MouseEvent,\n  TKeyboardEvent = KeyboardEvent\n>(\n  options: AutocompleteOptions<TItem>\n): AutocompleteApi<TItem, TEvent, TMouseEvent, TKeyboardEvent> {\n  checkOptions(options);\n\n  const subscribers: AutocompleteSubscribers<TItem> = [];\n  const props = getDefaultProps(options, subscribers);\n  const store = createStore(stateReducer, props, onStoreStateChange);\n\n  const setters = getAutocompleteSetters({ store });\n  const propGetters = getPropGetters<\n    TItem,\n    TEvent,\n    TMouseEvent,\n    TKeyboardEvent\n  >({ props, refresh, store, ...setters });\n\n  function onStoreStateChange({ prevState, state }) {\n    props.onStateChange({ prevState, state, refresh, ...setters });\n  }\n\n  function refresh() {\n    return onInput({\n      event: new Event('input'),\n      nextState: { isOpen: store.getState().isOpen },\n      props,\n      query: store.getState().query,\n      refresh,\n      store,\n      ...setters,\n    });\n  }\n\n  props.plugins.forEach((plugin) =>\n    plugin.subscribe?.({\n      ...setters,\n      refresh,\n      onSelect(fn) {\n        subscribers.push({ onSelect: fn });\n      },\n      onActive(fn) {\n        subscribers.push({ onActive: fn });\n      },\n    })\n  );\n\n  return {\n    refresh,\n    ...propGetters,\n    ...setters,\n  };\n}\n","import {\n  AutocompleteState,\n  AutocompleteStore,\n  BaseItem,\n  InternalAutocompleteOptions,\n  Reducer,\n} from './types';\n\ntype OnStoreStateChange<TItem extends BaseItem> = ({\n  prevState,\n  state,\n}: {\n  prevState: AutocompleteState<TItem>;\n  state: AutocompleteState<TItem>;\n}) => void;\n\nexport function createStore<TItem extends BaseItem>(\n  reducer: Reducer,\n  props: InternalAutocompleteOptions<TItem>,\n  onStoreStateChange: OnStoreStateChange<TItem>\n): AutocompleteStore<TItem> {\n  let state = props.initialState;\n\n  return {\n    getState() {\n      return state;\n    },\n    dispatch(action, payload) {\n      const prevState = { ...state };\n      state = reducer(state, {\n        type: action,\n        props,\n        payload,\n      });\n\n      onStoreStateChange({ state, prevState });\n    },\n  };\n}\n","import {\n  AutocompleteApi,\n  AutocompleteCollection,\n  AutocompleteStore,\n  BaseItem,\n} from './types';\nimport { flatten } from './utils';\n\ninterface GetAutocompleteSettersOptions<TItem extends BaseItem> {\n  store: AutocompleteStore<TItem>;\n}\n\nexport function getAutocompleteSetters<TItem extends BaseItem>({\n  store,\n}: GetAutocompleteSettersOptions<TItem>) {\n  const setActiveItemId: AutocompleteApi<TItem>['setActiveItemId'] = (\n    value\n  ) => {\n    store.dispatch('setActiveItemId', value);\n  };\n\n  const setQuery: AutocompleteApi<TItem>['setQuery'] = (value) => {\n    store.dispatch('setQuery', value);\n  };\n\n  const setCollections: AutocompleteApi<TItem>['setCollections'] = (\n    rawValue\n  ) => {\n    let baseItemId = 0;\n    const value = rawValue.map<AutocompleteCollection<TItem>>((collection) => ({\n      ...collection,\n      // We flatten the stored items to support calling `getAlgoliaResults`\n      // from the source itself.\n      items: flatten(collection.items as any).map((item: any) => ({\n        ...item,\n        __autocomplete_id: baseItemId++,\n      })),\n    }));\n\n    store.dispatch('setCollections', value);\n  };\n\n  const setIsOpen: AutocompleteApi<TItem>['setIsOpen'] = (value) => {\n    store.dispatch('setIsOpen', value);\n  };\n\n  const setStatus: AutocompleteApi<TItem>['setStatus'] = (value) => {\n    store.dispatch('setStatus', value);\n  };\n\n  const setContext: AutocompleteApi<TItem>['setContext'] = (value) => {\n    store.dispatch('setContext', value);\n  };\n\n  return {\n    setActiveItemId,\n    setQuery,\n    setCollections,\n    setIsOpen,\n    setStatus,\n    setContext,\n  };\n}\n","export const version = '1.0.1';\n"],"names":["autocompleteId","getItemsCount","state","collections","length","reduce","sum","collection","items","flatten","values","a","b","concat","getNextActiveItemId","moveAmount","baseIndex","itemCount","defaultActiveItemId","numericIndex","noop","getActiveItem","collectionIndex","map","acc","collectionsCount","index","nextValue","push","current","activeItemId","getCollectionFromActiveItemId","item","isOffsetFound","counter","previousItemsOffset","currentCollection","getRelativeActiveItemId","source","itemInputValue","getItemInputValue","itemUrl","getItemUrl","isOrContainsNode","parent","child","contains","getDefaultProps","props","pluginSubscribers","environment","window","plugins","debug","openOnFocus","placeholder","autoFocus","stallThreshold","shouldPanelOpen","id","initialState","query","completion","isOpen","status","context","onStateChange","params","forEach","x","_x$onStateChange","onSubmit","_x$onSubmit","onReset","_x$onReset","getSources","Promise","all","plugin","filter","Boolean","seenSourceIds","resolve","then","sources","Array","isArray","JSON","stringify","maybeSource","sourceId","includes","Error","normalizedSource","onSelect","setIsOpen","onActive","getNormalizedSources","nested","_x$onSelect","_x$onActive","navigator","navigate","location","assign","navigateNewTab","windowReference","open","focus","navigateNewWindow","isDescription","execute","preResolve","itemsOrDescription","requests","queries","transformResponse","searchClient","container","find","request","maybeDescription","responses","postResolve","matches","response","results","transform","rawResults","result","hits","_hits","hit","__autocomplete_indexName","__autocomplete_queryID","queryID","facetHits","_facetHits","facetHit","label","value","count","_highlightResult","highlighted","mapToAlgoliaResponse","lastStalledId","onInput","event","nextState","refresh","store","setters","clearTimeout","setCollections","setQuery","setActiveItemId","setStatus","setTimeout","getState","getItems","isPanelOpen","highlightedItem","finally","getPropGetters","getEnvironmentProps","providedProps","inputElement","formElement","panelElement","onTouchStart","target","some","contextNode","document","activeElement","dispatch","onTouchMove","blur","getRootProps","rest","role","undefined","getFormProps","action","noValidate","preventDefault","getLabelProps","htmlFor","getInputProps","onFocus","isTouchDevice","maxLength","activeItem","autoComplete","autoCorrect","autoCapitalize","enterKeyHint","spellCheck","type","onChange","currentTarget","slice","onKeyDown","key","nodeItem","getElementById","scrollIntoViewIfNeeded","scrollIntoView","every","metaKey","ctrlKey","shiftKey","altKey","onBlur","onClick","getPanelProps","onMouseDown","onMouseLeave","getListProps","getItemProps","__autocomplete_id","onMouseMove","getCompletion","stateReducer","payload","options","subscribers","reducer","onStoreStateChange","prevState","createStore","rawValue","baseItemId","setContext","getAutocompleteSetters","propGetters","Event","subscribe","_plugin$subscribe","fn"],"mappings":"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"}