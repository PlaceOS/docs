{"version":3,"sources":["../src/textlint-rule-alex.js"],"names":["defaultOptions","allow","undefined","deny","noBinary","profanitySureness","module","exports","textlintRuleAlex","context","options","Syntax","RuleError","report","getSource","helper","RuleHelper","opts","reportError","node","result","ruleError","ruleId","message","line","column","Str","isChildNode","Link","Image","BlockQuote","Emphasis","text","messages","forEach"],"mappings":"AAAA;AACA;;AACA;;AACA;;;;;;;;;;AACA,IAAMA,cAAc,GAAG;AACnBC,EAAAA,KAAK,EAAEC,SADY;AAEnBC,EAAAA,IAAI,EAAED,SAFa;AAGnBE,EAAAA,QAAQ,EAAE,KAHS;AAInBC,EAAAA,iBAAiB,EAAE;AAJA,CAAvB;;AAMAC,MAAM,CAACC,OAAP,GAAiB,SAASC,gBAAT,CAA0BC,OAA1B,EAAiD;AAAA,MAAdC,OAAc,uEAAJ,EAAI;AAC9D,MAAM;AAACC,IAAAA,MAAD;AAASC,IAAAA,SAAT;AAAoBC,IAAAA,MAApB;AAA4BC,IAAAA;AAA5B,MAAyCL,OAA/C;AACA,MAAMM,MAAM,GAAG,IAAIC,8BAAJ,CAAeP,OAAf,CAAf;;AACA,MAAMQ,IAAI,mCAAOjB,cAAP,GAA0BU,OAA1B,CAAV;AACA;;;;;;;;;;;;;;;AAaA,MAAMQ,WAAW,GAAG,CAACC,IAAD,EAAOC,MAAP,KAAkB;AAClC,QAAMC,SAAS,GAAG,IAAIT,SAAJ,YAAkBQ,MAAM,CAACE,MAAzB,eAAoCF,MAAM,CAACG,OAA3C,GAAsD;AACpEC,MAAAA,IAAI,EAAEJ,MAAM,CAACI,IAAP,GAAc,CADgD;AAEpEC,MAAAA,MAAM,EAAEL,MAAM,CAACK,MAAP,GAAgB;AAF4C,KAAtD,CAAlB;AAIAZ,IAAAA,MAAM,CAACM,IAAD,EAAOE,SAAP,CAAN;AACH,GAND;;AAOA,SAAO;AACH,KAACV,MAAM,CAACe,GAAR,EAAaP,IAAb,EAAkB;AACd,UAAIJ,MAAM,CAACY,WAAP,CAAmBR,IAAnB,EAAyB,CAACR,MAAM,CAACiB,IAAR,EAAcjB,MAAM,CAACkB,KAArB,EAA4BlB,MAAM,CAACmB,UAAnC,EAA+CnB,MAAM,CAACoB,QAAtD,CAAzB,CAAJ,EAA+F;AAC3F;AACH;;AACD,UAAMC,IAAI,GAAGlB,SAAS,CAACK,IAAD,CAAtB;AACA,UAAMc,QAAQ,GAAG,mBAAKD,IAAL,EAAWf,IAAX,EAAiBgB,QAAlC;AACAA,MAAAA,QAAQ,CAACC,OAAT,CAAkBd,MAAD,IAAY;AACzBF,QAAAA,WAAW,CAACC,IAAD,EAAOC,MAAP,CAAX;AACH,OAFD;AAGH;;AAVE,GAAP;AAYH,CApCD","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport {RuleHelper} from \"textlint-rule-helper\";\nimport alex from \"alex\";\nconst defaultOptions = {\n    allow: undefined,\n    deny: undefined,\n    noBinary: false,\n    profanitySureness: 0\n};\nmodule.exports = function textlintRuleAlex(context, options = {}) {\n    const {Syntax, RuleError, report, getSource} = context;\n    const helper = new RuleHelper(context);\n    const opts = {...defaultOptions, ...options};\n    /*\n    { [1:5-1:14: `boogeyman` may be insensitive, use `boogey` instead]\n    message: '`boogeyman` may be insensitive, use `boogey` instead',\n    name: '1:5-1:14',\n    file: '',\n    reason: '`boogeyman` may be insensitive, use `boogey` instead',\n    line: 1,\n    column: 5,\n    location: Position { start: [Object], end: [Object] },\n    fatal: false,\n    ruleId: 'boogeyman-boogeywoman',\n    source: 'retext-equality' }\n     */\n    const reportError = (node, result) => {\n        const ruleError = new RuleError(`[${result.ruleId}] ${result.message}`, {\n            line: result.line - 1,\n            column: result.column - 1\n        });\n        report(node, ruleError);\n    };\n    return {\n        [Syntax.Str](node){\n            if (helper.isChildNode(node, [Syntax.Link, Syntax.Image, Syntax.BlockQuote, Syntax.Emphasis])) {\n                return;\n            }\n            const text = getSource(node);\n            const messages = alex(text, opts).messages;\n            messages.forEach((result) => {\n                reportError(node, result);\n            });\n        }\n    }\n}"],"file":"textlint-rule-alex.js"}