// LICENSE : MIT
"use strict";

var _textlintRuleHelper = require("textlint-rule-helper");

var _alex = _interopRequireDefault(require("alex"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var defaultOptions = {
  allow: undefined,
  deny: undefined,
  noBinary: false,
  profanitySureness: 0
};

module.exports = function textlintRuleAlex(context) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var {
    Syntax,
    RuleError,
    report,
    getSource
  } = context;
  var helper = new _textlintRuleHelper.RuleHelper(context);

  var opts = _objectSpread(_objectSpread({}, defaultOptions), options);
  /*
  { [1:5-1:14: `boogeyman` may be insensitive, use `boogey` instead]
  message: '`boogeyman` may be insensitive, use `boogey` instead',
  name: '1:5-1:14',
  file: '',
  reason: '`boogeyman` may be insensitive, use `boogey` instead',
  line: 1,
  column: 5,
  location: Position { start: [Object], end: [Object] },
  fatal: false,
  ruleId: 'boogeyman-boogeywoman',
  source: 'retext-equality' }
   */


  var reportError = (node, result) => {
    var ruleError = new RuleError("[".concat(result.ruleId, "] ").concat(result.message), {
      line: result.line - 1,
      column: result.column - 1
    });
    report(node, ruleError);
  };

  return {
    [Syntax.Str](node) {
      if (helper.isChildNode(node, [Syntax.Link, Syntax.Image, Syntax.BlockQuote, Syntax.Emphasis])) {
        return;
      }

      var text = getSource(node);
      var messages = (0, _alex.default)(text, opts).messages;
      messages.forEach(result => {
        reportError(node, result);
      });
    }

  };
};
//# sourceMappingURL=textlint-rule-alex.js.map