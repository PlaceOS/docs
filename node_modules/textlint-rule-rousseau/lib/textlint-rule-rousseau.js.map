{"version":3,"sources":["../src/textlint-rule-rousseau.js"],"names":["StringSource","require","rousseau","map","defaultOptions","showLevels","ignoreTypes","ignoreInlineNodeTypes","mapNode","ast","mapFn","preorder","node","index","parent","newNode","Object","assign","children","child","module","exports","textlintRousseau","context","options","helper","RuleHelper","ignoreNodeManager","IgnoreNodeManager","Syntax","RuleError","report","getSource","Code","isShowType","type","indexOf","isShowLevel","level","createSuggest","replacements","length","value","join","reportError","source","result","originalIndexFromIndex","isIgnoredIndex","suggestions","ruleError","message","Paragraph","isChildNode","Link","Image","BlockQuote","Emphasis","ignoreChildrenByTypes","filteredNode","Array","text","toString","reportSourceError","results","err","forEach"],"mappings":"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","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport {RuleHelper, IgnoreNodeManager} from \"textlint-rule-helper\";\nconst StringSource = require(\"textlint-util-to-string\");\nconst rousseau = require(\"rousseau\");\nconst map = require(\"unist-util-map\");\nconst defaultOptions = {\n    // \"suggestion\", \"warning\", \"error\"\n    showLevels: [\"suggestion\", \"warning\", \"error\"],\n    // ignore check type of https://github.com/GitbookIO/rousseau#checks\n    ignoreTypes: [],\n    // ignore textlint's node type\n    ignoreInlineNodeTypes: [\"Code\"]\n};\n\nconst mapNode = function (ast, mapFn) {\n    return (function preorder(node, index, parent) {\n        const newNode = Object.assign({}, mapFn(node, index, parent));\n        if (node.children) {\n            newNode.children = node.children.map(function (child, index) {\n                return preorder(child, index, node);\n            });\n        }\n        return newNode;\n    }(ast, null, null));\n};\n\nmodule.exports = function textlintRousseau(context, options = defaultOptions) {\n    const helper = new RuleHelper(context);\n    const ignoreNodeManager = new IgnoreNodeManager();\n    const {Syntax, RuleError, report, getSource} = context;\n    const showLevels = options.showLevels || defaultOptions.showLevels;\n    const ignoreTypes = options.ignoreTypes || defaultOptions.ignoreTypes;\n    const ignoreInlineNodeTypes = options.ignoreInlineNodeTypes || [Syntax.Code];\n    const isShowType = (type) => {\n        return ignoreTypes.indexOf(type) === -1;\n    };\n    const isShowLevel = (level) => {\n        return showLevels.indexOf(level) !== -1;\n    };\n    /*\n     {\n         // Type of check that output this suggestion\n         type: \"so\",\n\n         // Level of importance\n         // \"suggestion\", \"warning\", \"error\"\n         level: \"warning\",\n\n         // Index in the text\n         index: 10,\n\n         // Size of the section in the text\n         offset: 2,\n\n         // Message to describe the suggestion\n         message: \"omit 'So' from the beginning of sentences\",\n\n         // Replacements suggestion\n         replacements: [\n             {\n                value: \"\"\n             }\n         ]\n     }\n     */\n    const createSuggest = (replacements) => {\n        if (replacements.length === 0) {\n            return \"\";\n        }\n        return \"\\nSuggestions:\\n\"\n            + replacements.map(({value}) => {\n                return \"=> \" + value;\n            }).join(\"\\n\");\n    };\n    const reportError = (node, source, result) => {\n        const level = result.level;\n        const type = result.type;\n        // if not contains showing options, ignore this result\n        if (!isShowLevel(level)) {\n            return;\n        }\n        if (!isShowType(type)) {\n            return;\n        }\n        const index = source.originalIndexFromIndex(result.index);\n        // if already ignored, should not report\n        if (ignoreNodeManager.isIgnoredIndex(index)) {\n            return;\n        }\n        const suggestions = createSuggest(result.replacements);\n        const ruleError = new RuleError(`${level}(${type}) ${result.message}${suggestions}`, {\n            index\n        });\n        report(node, ruleError);\n    };\n\n    return {\n        [Syntax.Paragraph](node) {\n            // ignore if wrapped node types\n            if (helper.isChildNode(node, [Syntax.Link, Syntax.Image, Syntax.BlockQuote, Syntax.Emphasis])) {\n                return;\n            }\n            // ignore if contain child node types\n            ignoreNodeManager.ignoreChildrenByTypes(node, ignoreInlineNodeTypes);\n            // check\n            // replace code with dummy code\n            // if you want to filter(remove) code, use https://github.com/eush77/unist-util-filter\n            const filteredNode = map(node, (node) => {\n                if (node.type === Syntax.Code) {\n                    // only change `value` to dummy\n                    return Object.assign({}, node, {\n                        value: new Array(node.value.length + 1).join(\"x\")\n                    });\n                }\n                return node;\n            });\n            if (!filteredNode) {\n                return;\n            }\n            const source = new StringSource(filteredNode);\n            const text = source.toString();\n            const reportSourceError = (results) => {\n                reportError(node, source, results);\n            };\n            rousseau(text, function (err, results) {\n                if (err) {\n                    throw err;\n                }\n                results.forEach(reportSourceError);\n            });\n        }\n    }\n};\n"],"file":"textlint-rule-rousseau.js"}